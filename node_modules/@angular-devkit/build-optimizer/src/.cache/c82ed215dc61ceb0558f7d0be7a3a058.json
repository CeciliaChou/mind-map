{"remainingRequest":"/Users/Summer/mind-map/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/Summer/mind-map/src/app/jsmind/js/jsmind.js","dependencies":[{"path":"/Users/Summer/mind-map/src/app/jsmind/js/jsmind.js","mtime":1521678254000},{"path":"/Users/Summer/mind-map/node_modules/cache-loader/dist/cjs.js","mtime":1524222415823},{"path":"/Users/Summer/mind-map/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["/*\n * Released under BSD License\n * Copyright (c) 2014-2016 hizzgdev@163.com\n *\n * Project Home:\n *   https://github.com/hizzgdev/jsmind/\n */\n;\n(function ($w) {\n    'use strict';\n    // set 'jsMind' as the library name.\n    // __name__ should be a const value, Never try to change it easily.\n    var __name__ = 'jsMind';\n    // library version\n    var __version__ = '0.4.6';\n    // author\n    var __author__ = 'hizzgdev@163.com';\n    // an noop function define\n    var _noop = function () { };\n    var logger = (typeof console === 'undefined') ? {\n        log: _noop, debug: _noop, error: _noop, warn: _noop, info: _noop\n    } : console;\n    // check global variables\n    if (typeof module === 'undefined' || !module.exports) {\n        if (typeof $w[__name__] != 'undefined') {\n            logger.log(__name__ + ' has been already exist.');\n            return;\n        }\n    }\n    // shortcut of methods in dom\n    var $d = $w.document;\n    var $g = function (id) { return $d.getElementById(id); };\n    var $c = function (tag) { return $d.createElement(tag); };\n    var $t = function (n, t) { if (n.hasChildNodes()) {\n        n.firstChild.nodeValue = t;\n    }\n    else {\n        n.appendChild($d.createTextNode(t));\n    } };\n    var $h = function (n, t) { n.innerHTML = t; };\n    // detect isElement\n    var $i = function (el) { return !!el && (typeof el === 'object') && (el.nodeType === 1) && (typeof el.style === 'object') && (typeof el.ownerDocument === 'object'); };\n    if (typeof String.prototype.startsWith != 'function') {\n        String.prototype.startsWith = function (p) { return this.slice(0, p.length) === p; };\n    }\n    var DEFAULT_OPTIONS = {\n        container: '',\n        editable: false,\n        theme: null,\n        mode: 'full',\n        support_html: true,\n        view: {\n            hmargin: 100,\n            vmargin: 50,\n            line_width: 2,\n            line_color: '#555'\n        },\n        layout: {\n            hspace: 30,\n            vspace: 20,\n            pspace: 13\n        },\n        default_event_handle: {\n            enable_mousedown_handle: true,\n            enable_click_handle: true,\n            enable_dblclick_handle: true\n        },\n        shortcut: {\n            enable: true,\n            handles: {},\n            mapping: {\n                addchild: 45,\n                addbrother: 13,\n                editnode: 113,\n                delnode: 46,\n                toggle: 32,\n                left: 37,\n                up: 38,\n                right: 39,\n                down: 40,\n            }\n        },\n    };\n    // core object\n    var jm = function (options) {\n        jm.current = this;\n        this.version = __version__;\n        var opts = {};\n        jm.util.json.merge(opts, DEFAULT_OPTIONS);\n        jm.util.json.merge(opts, options);\n        if (!opts.container) {\n            logger.error('the options.container should not be null or empty.');\n            return;\n        }\n        this.options = opts;\n        this.inited = false;\n        this.mind = null;\n        this.event_handles = [];\n        this.init();\n    };\n    // ============= static object =============================================\n    jm.direction = { left: -1, center: 0, right: 1 };\n    jm.event_type = { show: 1, resize: 2, edit: 3, select: 4 };\n    jm.node = function (sId, iIndex, sTopic, oData, bIsRoot, oParent, eDirection, bExpanded) {\n        if (!sId) {\n            logger.error('invalid nodeid');\n            return;\n        }\n        if (typeof iIndex != 'number') {\n            logger.error('invalid node index');\n            return;\n        }\n        if (typeof bExpanded === 'undefined') {\n            bExpanded = true;\n        }\n        this.id = sId;\n        this.index = iIndex;\n        this.topic = sTopic;\n        this.data = oData || {};\n        this.isroot = bIsRoot;\n        this.parent = oParent;\n        this.direction = eDirection;\n        this.expanded = !!bExpanded;\n        this.children = [];\n        this._data = {};\n    };\n    jm.node.compare = function (node1, node2) {\n        // '-1' is alwary the last\n        var r = 0;\n        var i1 = node1.index;\n        var i2 = node2.index;\n        if (i1 >= 0 && i2 >= 0) {\n            r = i1 - i2;\n        }\n        else if (i1 == -1 && i2 == -1) {\n            r = 0;\n        }\n        else if (i1 == -1) {\n            r = 1;\n        }\n        else if (i2 == -1) {\n            r = -1;\n        }\n        else {\n            r = 0;\n        }\n        //logger.debug(i1+' <> '+i2+'  =  '+r);\n        return r;\n    };\n    jm.node.inherited = function (pnode, node) {\n        if (!!pnode && !!node) {\n            if (pnode.id === node.id) {\n                return true;\n            }\n            if (pnode.isroot) {\n                return true;\n            }\n            var pid = pnode.id;\n            var p = node;\n            while (!p.isroot) {\n                p = p.parent;\n                if (p.id === pid) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n    jm.node.prototype = {\n        get_location: function () {\n            var vd = this._data.view;\n            return {\n                x: vd.abs_x,\n                y: vd.abs_y\n            };\n        },\n        get_size: function () {\n            var vd = this._data.view;\n            return {\n                w: vd.width,\n                h: vd.height\n            };\n        }\n    };\n    jm.mind = function () {\n        this.name = null;\n        this.author = null;\n        this.version = null;\n        this.root = null;\n        this.selected = null;\n        this.nodes = {};\n    };\n    jm.mind.prototype = {\n        get_node: function (nodeid) {\n            if (nodeid in this.nodes) {\n                return this.nodes[nodeid];\n            }\n            else {\n                logger.warn('the node[id=' + nodeid + '] can not be found');\n                return null;\n            }\n        },\n        set_root: function (nodeid, topic, data) {\n            if (this.root == null) {\n                this.root = new jm.node(nodeid, 0, topic, data, true);\n                this._put_node(this.root);\n            }\n            else {\n                logger.error('root node is already exist');\n            }\n        },\n        add_node: function (parent_node, nodeid, topic, data, idx, direction, expanded) {\n            if (!jm.util.is_node(parent_node)) {\n                var the_parent_node = this.get_node(parent_node);\n                if (!the_parent_node) {\n                    logger.error('the parent_node[id=' + parent_node + '] can not be found.');\n                    return null;\n                }\n                else {\n                    return this.add_node(the_parent_node, nodeid, topic, data, idx, direction, expanded);\n                }\n            }\n            var nodeindex = idx || -1;\n            var node = null;\n            if (parent_node.isroot) {\n                var d = jm.direction.right;\n                if (isNaN(direction)) {\n                    var children = parent_node.children;\n                    var children_len = children.length;\n                    var r = 0;\n                    for (var i = 0; i < children_len; i++) {\n                        if (children[i].direction === jm.direction.left) {\n                            r--;\n                        }\n                        else {\n                            r++;\n                        }\n                    }\n                    d = (children_len > 1 && r > 0) ? jm.direction.left : jm.direction.right;\n                }\n                else {\n                    d = (direction != jm.direction.left) ? jm.direction.right : jm.direction.left;\n                }\n                node = new jm.node(nodeid, nodeindex, topic, data, false, parent_node, d, expanded);\n            }\n            else {\n                node = new jm.node(nodeid, nodeindex, topic, data, false, parent_node, parent_node.direction, expanded);\n            }\n            if (this._put_node(node)) {\n                parent_node.children.push(node);\n                this._reindex(parent_node);\n            }\n            else {\n                logger.error('fail, the nodeid \\'' + node.id + '\\' has been already exist.');\n                node = null;\n            }\n            return node;\n        },\n        insert_node_before: function (node_before, nodeid, topic, data) {\n            if (!jm.util.is_node(node_before)) {\n                var the_node_before = this.get_node(node_before);\n                if (!the_node_before) {\n                    logger.error('the node_before[id=' + node_before + '] can not be found.');\n                    return null;\n                }\n                else {\n                    return this.insert_node_before(the_node_before, nodeid, topic, data);\n                }\n            }\n            var node_index = node_before.index - 0.5;\n            return this.add_node(node_before.parent, nodeid, topic, data, node_index);\n        },\n        get_node_before: function (node) {\n            if (!jm.util.is_node(node)) {\n                var the_node = this.get_node(node);\n                if (!the_node) {\n                    logger.error('the node[id=' + node + '] can not be found.');\n                    return null;\n                }\n                else {\n                    return this.get_node_before(the_node);\n                }\n            }\n            if (node.isroot) {\n                return null;\n            }\n            var idx = node.index - 2;\n            if (idx >= 0) {\n                return node.parent.children[idx];\n            }\n            else {\n                return null;\n            }\n        },\n        insert_node_after: function (node_after, nodeid, topic, data) {\n            if (!jm.util.is_node(node_after)) {\n                var the_node_after = this.get_node(node_before);\n                if (!the_node_after) {\n                    logger.error('the node_after[id=' + node_after + '] can not be found.');\n                    return null;\n                }\n                else {\n                    return this.insert_node_after(the_node_after, nodeid, topic, data);\n                }\n            }\n            var node_index = node_after.index + 0.5;\n            return this.add_node(node_after.parent, nodeid, topic, data, node_index);\n        },\n        get_node_after: function (node) {\n            if (!jm.util.is_node(node)) {\n                var the_node = this.get_node(node);\n                if (!the_node) {\n                    logger.error('the node[id=' + node + '] can not be found.');\n                    return null;\n                }\n                else {\n                    return this.get_node_after(the_node);\n                }\n            }\n            if (node.isroot) {\n                return null;\n            }\n            var idx = node.index;\n            var brothers = node.parent.children;\n            if (brothers.length >= idx) {\n                return node.parent.children[idx];\n            }\n            else {\n                return null;\n            }\n        },\n        move_node: function (node, beforeid, parentid, direction) {\n            if (!jm.util.is_node(node)) {\n                var the_node = this.get_node(node);\n                if (!the_node) {\n                    logger.error('the node[id=' + node + '] can not be found.');\n                    return null;\n                }\n                else {\n                    return this.move_node(the_node, beforeid, parentid, direction);\n                }\n            }\n            if (!parentid) {\n                parentid = node.parent.id;\n            }\n            return this._move_node(node, beforeid, parentid, direction);\n        },\n        _flow_node_direction: function (node, direction) {\n            if (typeof direction === 'undefined') {\n                direction = node.direction;\n            }\n            else {\n                node.direction = direction;\n            }\n            var len = node.children.length;\n            while (len--) {\n                this._flow_node_direction(node.children[len], direction);\n            }\n        },\n        _move_node_internal: function (node, beforeid) {\n            if (!!node && !!beforeid) {\n                if (beforeid == '_last_') {\n                    node.index = -1;\n                    this._reindex(node.parent);\n                }\n                else if (beforeid == '_first_') {\n                    node.index = 0;\n                    this._reindex(node.parent);\n                }\n                else {\n                    var node_before = (!!beforeid) ? this.get_node(beforeid) : null;\n                    if (node_before != null && node_before.parent != null && node_before.parent.id == node.parent.id) {\n                        node.index = node_before.index - 0.5;\n                        this._reindex(node.parent);\n                    }\n                }\n            }\n            return node;\n        },\n        _move_node: function (node, beforeid, parentid, direction) {\n            if (!!node && !!parentid) {\n                if (node.parent.id != parentid) {\n                    // remove from parent's children\n                    var sibling = node.parent.children;\n                    var si = sibling.length;\n                    while (si--) {\n                        if (sibling[si].id == node.id) {\n                            sibling.splice(si, 1);\n                            break;\n                        }\n                    }\n                    node.parent = this.get_node(parentid);\n                    node.parent.children.push(node);\n                }\n                if (node.parent.isroot) {\n                    if (direction == jsMind.direction.left) {\n                        node.direction = direction;\n                    }\n                    else {\n                        node.direction = jm.direction.right;\n                    }\n                }\n                else {\n                    node.direction = node.parent.direction;\n                }\n                this._move_node_internal(node, beforeid);\n                this._flow_node_direction(node);\n            }\n            return node;\n        },\n        remove_node: function (node) {\n            if (!jm.util.is_node(node)) {\n                var the_node = this.get_node(node);\n                if (!the_node) {\n                    logger.error('the node[id=' + node + '] can not be found.');\n                    return false;\n                }\n                else {\n                    return this.remove_node(the_node);\n                }\n            }\n            if (!node) {\n                logger.error('fail, the node can not be found');\n                return false;\n            }\n            if (node.isroot) {\n                logger.error('fail, can not remove root node');\n                return false;\n            }\n            if (this.selected != null && this.selected.id == node.id) {\n                this.selected = null;\n            }\n            // clean all subordinate nodes\n            var children = node.children;\n            var ci = children.length;\n            while (ci--) {\n                this.remove_node(children[ci]);\n            }\n            // clean all children\n            children.length = 0;\n            // remove from parent's children\n            var sibling = node.parent.children;\n            var si = sibling.length;\n            while (si--) {\n                if (sibling[si].id == node.id) {\n                    sibling.splice(si, 1);\n                    break;\n                }\n            }\n            // remove from global nodes\n            delete this.nodes[node.id];\n            // clean all properties\n            for (var k in node) {\n                delete node[k];\n            }\n            // remove it's self\n            node = null;\n            //delete node;\n            return true;\n        },\n        _put_node: function (node) {\n            if (node.id in this.nodes) {\n                logger.warn('the nodeid \\'' + node.id + '\\' has been already exist.');\n                return false;\n            }\n            else {\n                this.nodes[node.id] = node;\n                return true;\n            }\n        },\n        _reindex: function (node) {\n            if (node instanceof jm.node) {\n                node.children.sort(jm.node.compare);\n                for (var i = 0; i < node.children.length; i++) {\n                    node.children[i].index = i + 1;\n                }\n            }\n        },\n    };\n    jm.format = {\n        node_tree: {\n            example: {\n                \"meta\": {\n                    \"name\": __name__,\n                    \"author\": __author__,\n                    \"version\": __version__\n                },\n                \"format\": \"node_tree\",\n                \"data\": { \"id\": \"root\", \"topic\": \"jsMind Example\" }\n            },\n            get_mind: function (source) {\n                var df = jm.format.node_tree;\n                var mind = new jm.mind();\n                mind.name = source.meta.name;\n                mind.author = source.meta.author;\n                mind.version = source.meta.version;\n                df._parse(mind, source.data);\n                return mind;\n            },\n            get_data: function (mind) {\n                var df = jm.format.node_tree;\n                var json = {};\n                json.meta = {\n                    name: mind.name,\n                    author: mind.author,\n                    version: mind.version\n                };\n                json.format = 'node_tree';\n                json.data = df._buildnode(mind.root);\n                return json;\n            },\n            _parse: function (mind, node_root) {\n                var df = jm.format.node_tree;\n                var data = df._extract_data(node_root);\n                mind.set_root(node_root.id, node_root.topic, data);\n                if ('children' in node_root) {\n                    var children = node_root.children;\n                    for (var i = 0; i < children.length; i++) {\n                        df._extract_subnode(mind, mind.root, children[i]);\n                    }\n                }\n            },\n            _extract_data: function (node_json) {\n                var data = {};\n                for (var k in node_json) {\n                    if (k == 'id' || k == 'topic' || k == 'children' || k == 'direction' || k == 'expanded') {\n                        continue;\n                    }\n                    data[k] = node_json[k];\n                }\n                return data;\n            },\n            _extract_subnode: function (mind, node_parent, node_json) {\n                var df = jm.format.node_tree;\n                var data = df._extract_data(node_json);\n                var d = null;\n                if (node_parent.isroot) {\n                    d = node_json.direction == 'left' ? jm.direction.left : jm.direction.right;\n                }\n                var node = mind.add_node(node_parent, node_json.id, node_json.topic, data, null, d, node_json.expanded);\n                if ('children' in node_json) {\n                    var children = node_json.children;\n                    for (var i = 0; i < children.length; i++) {\n                        df._extract_subnode(mind, node, children[i]);\n                    }\n                }\n            },\n            _buildnode: function (node) {\n                var df = jm.format.node_tree;\n                if (!(node instanceof jm.node)) {\n                    return;\n                }\n                var o = {\n                    id: node.id,\n                    topic: node.topic,\n                    expanded: node.expanded\n                };\n                if (!!node.parent && node.parent.isroot) {\n                    o.direction = node.direction == jm.direction.left ? 'left' : 'right';\n                }\n                if (node.data != null) {\n                    var node_data = node.data;\n                    for (var k in node_data) {\n                        o[k] = node_data[k];\n                    }\n                }\n                var children = node.children;\n                if (children.length > 0) {\n                    o.children = [];\n                    for (var i = 0; i < children.length; i++) {\n                        o.children.push(df._buildnode(children[i]));\n                    }\n                }\n                return o;\n            }\n        },\n        node_array: {\n            example: {\n                \"meta\": {\n                    \"name\": __name__,\n                    \"author\": __author__,\n                    \"version\": __version__\n                },\n                \"format\": \"node_array\",\n                \"data\": [\n                    { \"id\": \"root\", \"topic\": \"jsMind Example\", \"isroot\": true }\n                ]\n            },\n            get_mind: function (source) {\n                var df = jm.format.node_array;\n                var mind = new jm.mind();\n                mind.name = source.meta.name;\n                mind.author = source.meta.author;\n                mind.version = source.meta.version;\n                df._parse(mind, source.data);\n                return mind;\n            },\n            get_data: function (mind) {\n                var df = jm.format.node_array;\n                var json = {};\n                json.meta = {\n                    name: mind.name,\n                    author: mind.author,\n                    version: mind.version\n                };\n                json.format = 'node_array';\n                json.data = [];\n                df._array(mind, json.data);\n                return json;\n            },\n            _parse: function (mind, node_array) {\n                var df = jm.format.node_array;\n                var narray = node_array.slice(0);\n                // reverse array for improving looping performance\n                narray.reverse();\n                var root_id = df._extract_root(mind, narray);\n                if (!!root_id) {\n                    df._extract_subnode(mind, root_id, narray);\n                }\n                else {\n                    logger.error('root node can not be found');\n                }\n            },\n            _extract_root: function (mind, node_array) {\n                var df = jm.format.node_array;\n                var i = node_array.length;\n                while (i--) {\n                    if ('isroot' in node_array[i] && node_array[i].isroot) {\n                        var root_json = node_array[i];\n                        var data = df._extract_data(root_json);\n                        mind.set_root(root_json.id, root_json.topic, data);\n                        node_array.splice(i, 1);\n                        return root_json.id;\n                    }\n                }\n                return null;\n            },\n            _extract_subnode: function (mind, parentid, node_array) {\n                var df = jm.format.node_array;\n                var i = node_array.length;\n                var node_json = null;\n                var data = null;\n                var extract_count = 0;\n                while (i--) {\n                    node_json = node_array[i];\n                    if (node_json.parentid == parentid) {\n                        data = df._extract_data(node_json);\n                        var d = null;\n                        var node_direction = node_json.direction;\n                        if (!!node_direction) {\n                            d = node_direction == 'left' ? jm.direction.left : jm.direction.right;\n                        }\n                        mind.add_node(parentid, node_json.id, node_json.topic, data, null, d, node_json.expanded);\n                        node_array.splice(i, 1);\n                        extract_count++;\n                        var sub_extract_count = df._extract_subnode(mind, node_json.id, node_array);\n                        if (sub_extract_count > 0) {\n                            // reset loop index after extract subordinate node\n                            i = node_array.length;\n                            extract_count += sub_extract_count;\n                        }\n                    }\n                }\n                return extract_count;\n            },\n            _extract_data: function (node_json) {\n                var data = {};\n                for (var k in node_json) {\n                    if (k == 'id' || k == 'topic' || k == 'parentid' || k == 'isroot' || k == 'direction' || k == 'expanded') {\n                        continue;\n                    }\n                    data[k] = node_json[k];\n                }\n                return data;\n            },\n            _array: function (mind, node_array) {\n                var df = jm.format.node_array;\n                df._array_node(mind.root, node_array);\n            },\n            _array_node: function (node, node_array) {\n                var df = jm.format.node_array;\n                if (!(node instanceof jm.node)) {\n                    return;\n                }\n                var o = {\n                    id: node.id,\n                    topic: node.topic,\n                    expanded: node.expanded\n                };\n                if (!!node.parent) {\n                    o.parentid = node.parent.id;\n                }\n                if (node.isroot) {\n                    o.isroot = true;\n                }\n                if (!!node.parent && node.parent.isroot) {\n                    o.direction = node.direction == jm.direction.left ? 'left' : 'right';\n                }\n                if (node.data != null) {\n                    var node_data = node.data;\n                    for (var k in node_data) {\n                        o[k] = node_data[k];\n                    }\n                }\n                node_array.push(o);\n                var ci = node.children.length;\n                for (var i = 0; i < ci; i++) {\n                    df._array_node(node.children[i], node_array);\n                }\n            },\n        },\n        freemind: {\n            example: {\n                \"meta\": {\n                    \"name\": __name__,\n                    \"author\": __author__,\n                    \"version\": __version__\n                },\n                \"format\": \"freemind\",\n                \"data\": \"<map version=\\\"1.0.1\\\"><node ID=\\\"root\\\" TEXT=\\\"freemind Example\\\"/></map>\"\n            },\n            get_mind: function (source) {\n                var df = jm.format.freemind;\n                var mind = new jm.mind();\n                mind.name = source.meta.name;\n                mind.author = source.meta.author;\n                mind.version = source.meta.version;\n                var xml = source.data;\n                var xml_doc = df._parse_xml(xml);\n                var xml_root = df._find_root(xml_doc);\n                df._load_node(mind, null, xml_root);\n                return mind;\n            },\n            get_data: function (mind) {\n                var df = jm.format.freemind;\n                var json = {};\n                json.meta = {\n                    name: mind.name,\n                    author: mind.author,\n                    version: mind.version\n                };\n                json.format = 'freemind';\n                var xmllines = [];\n                xmllines.push('<map version=\\\"1.0.1\\\">');\n                df._buildmap(mind.root, xmllines);\n                xmllines.push('</map>');\n                json.data = xmllines.join(' ');\n                return json;\n            },\n            _parse_xml: function (xml) {\n                var xml_doc = null;\n                if (window.DOMParser) {\n                    var parser = new DOMParser();\n                    xml_doc = parser.parseFromString(xml, 'text/xml');\n                }\n                else {\n                    xml_doc = new ActiveXObject('Microsoft.XMLDOM');\n                    xml_doc.async = false;\n                    xml_doc.loadXML(xml);\n                }\n                return xml_doc;\n            },\n            _find_root: function (xml_doc) {\n                var nodes = xml_doc.childNodes;\n                var node = null;\n                var root = null;\n                var n = null;\n                for (var i = 0; i < nodes.length; i++) {\n                    n = nodes[i];\n                    if (n.nodeType == 1 && n.tagName == 'map') {\n                        node = n;\n                        break;\n                    }\n                }\n                if (!!node) {\n                    var ns = node.childNodes;\n                    node = null;\n                    for (var i = 0; i < ns.length; i++) {\n                        n = ns[i];\n                        if (n.nodeType == 1 && n.tagName == 'node') {\n                            node = n;\n                            break;\n                        }\n                    }\n                }\n                return node;\n            },\n            _load_node: function (mind, parent_id, xml_node) {\n                var df = jm.format.freemind;\n                var node_id = xml_node.getAttribute('ID');\n                var node_topic = xml_node.getAttribute('TEXT');\n                // look for richcontent\n                if (node_topic == null) {\n                    var topic_children = xml_node.childNodes;\n                    var topic_child = null;\n                    for (var i = 0; i < topic_children.length; i++) {\n                        topic_child = topic_children[i];\n                        //logger.debug(topic_child.tagName);\n                        if (topic_child.nodeType == 1 && topic_child.tagName === 'richcontent') {\n                            node_topic = topic_child.textContent;\n                            break;\n                        }\n                    }\n                }\n                var node_data = df._load_attributes(xml_node);\n                var node_expanded = ('expanded' in node_data) ? (node_data.expanded == 'true') : true;\n                delete node_data.expanded;\n                var node_position = xml_node.getAttribute('POSITION');\n                var node_direction = null;\n                if (!!node_position) {\n                    node_direction = node_position == 'left' ? jm.direction.left : jm.direction.right;\n                }\n                //logger.debug(node_position +':'+ node_direction);\n                if (!!parent_id) {\n                    mind.add_node(parent_id, node_id, node_topic, node_data, null, node_direction, node_expanded);\n                }\n                else {\n                    mind.set_root(node_id, node_topic, node_data);\n                }\n                var children = xml_node.childNodes;\n                var child = null;\n                for (var i = 0; i < children.length; i++) {\n                    child = children[i];\n                    if (child.nodeType == 1 && child.tagName == 'node') {\n                        df._load_node(mind, node_id, child);\n                    }\n                }\n            },\n            _load_attributes: function (xml_node) {\n                var children = xml_node.childNodes;\n                var attr = null;\n                var attr_data = {};\n                for (var i = 0; i < children.length; i++) {\n                    attr = children[i];\n                    if (attr.nodeType == 1 && attr.tagName === 'attribute') {\n                        attr_data[attr.getAttribute('NAME')] = attr.getAttribute('VALUE');\n                    }\n                }\n                return attr_data;\n            },\n            _buildmap: function (node, xmllines) {\n                var df = jm.format.freemind;\n                var pos = null;\n                if (!!node.parent && node.parent.isroot) {\n                    pos = node.direction === jm.direction.left ? 'left' : 'right';\n                }\n                xmllines.push('<node');\n                xmllines.push('ID=\\\"' + node.id + '\\\"');\n                if (!!pos) {\n                    xmllines.push('POSITION=\\\"' + pos + '\\\"');\n                }\n                xmllines.push('TEXT=\\\"' + node.topic + '\\\">');\n                // store expanded status as an attribute\n                xmllines.push('<attribute NAME=\\\"expanded\\\" VALUE=\\\"' + node.expanded + '\\\"/>');\n                // for attributes\n                var node_data = node.data;\n                if (node_data != null) {\n                    for (var k in node_data) {\n                        xmllines.push('<attribute NAME=\\\"' + k + '\\\" VALUE=\\\"' + node_data[k] + '\\\"/>');\n                    }\n                }\n                // for children\n                var children = node.children;\n                for (var i = 0; i < children.length; i++) {\n                    df._buildmap(children[i], xmllines);\n                }\n                xmllines.push('</node>');\n            },\n        },\n    };\n    // ============= utility object =============================================\n    jm.util = {\n        is_node: function (node) {\n            return !!node && node instanceof jm.node;\n        },\n        ajax: {\n            _xhr: function () {\n                var xhr = null;\n                if (window.XMLHttpRequest) {\n                    xhr = new XMLHttpRequest();\n                }\n                else {\n                    try {\n                        xhr = new ActiveXObject('Microsoft.XMLHTTP');\n                    }\n                    catch (e) { }\n                }\n                return xhr;\n            },\n            _eurl: function (url) {\n                return encodeURIComponent(url);\n            },\n            request: function (url, param, method, callback, fail_callback) {\n                var a = jm.util.ajax;\n                var p = null;\n                var tmp_param = [];\n                for (var k in param) {\n                    tmp_param.push(a._eurl(k) + '=' + a._eurl(param[k]));\n                }\n                if (tmp_param.length > 0) {\n                    p = tmp_param.join('&');\n                }\n                var xhr = a._xhr();\n                if (!xhr) {\n                    return;\n                }\n                xhr.onreadystatechange = function () {\n                    if (xhr.readyState == 4) {\n                        if (xhr.status == 200 || xhr.status == 0) {\n                            if (typeof callback === 'function') {\n                                var data = jm.util.json.string2json(xhr.responseText);\n                                if (data != null) {\n                                    callback(data);\n                                }\n                                else {\n                                    callback(xhr.responseText);\n                                }\n                            }\n                        }\n                        else {\n                            if (typeof fail_callback === 'function') {\n                                fail_callback(xhr);\n                            }\n                            else {\n                                logger.error('xhr request failed.', xhr);\n                            }\n                        }\n                    }\n                };\n                method = method || 'GET';\n                xhr.open(method, url, true);\n                xhr.setRequestHeader('If-Modified-Since', '0');\n                if (method == 'POST') {\n                    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded;charset=utf-8');\n                    xhr.send(p);\n                }\n                else {\n                    xhr.send();\n                }\n            },\n            get: function (url, callback) {\n                return jm.util.ajax.request(url, {}, 'GET', callback);\n            },\n            post: function (url, param, callback) {\n                return jm.util.ajax.request(url, param, 'POST', callback);\n            }\n        },\n        dom: {\n            //target,eventType,handler\n            add_event: function (t, e, h) {\n                if (!!t.addEventListener) {\n                    t.addEventListener(e, h, false);\n                }\n                else {\n                    t.attachEvent('on' + e, h);\n                }\n            }\n        },\n        canvas: {\n            bezierto: function (ctx, x1, y1, x2, y2) {\n                ctx.beginPath();\n                ctx.moveTo(x1, y1);\n                ctx.bezierCurveTo(x1 + (x2 - x1) * 2 / 3, y1, x1, y2, x2, y2);\n                ctx.stroke();\n            },\n            lineto: function (ctx, x1, y1, x2, y2) {\n                ctx.beginPath();\n                ctx.moveTo(x1, y1);\n                ctx.lineTo(x2, y2);\n                ctx.stroke();\n            },\n            clear: function (ctx, x, y, w, h) {\n                ctx.clearRect(x, y, w, h);\n            }\n        },\n        file: {\n            read: function (file_data, fn_callback) {\n                var reader = new FileReader();\n                reader.onload = function () {\n                    if (typeof fn_callback === 'function') {\n                        fn_callback(this.result, file_data.name);\n                    }\n                };\n                reader.readAsText(file_data);\n            },\n            save: function (file_data, type, name) {\n                var blob;\n                if (typeof $w.Blob === 'function') {\n                    blob = new Blob([file_data], { type: type });\n                }\n                else {\n                    var BlobBuilder = $w.BlobBuilder || $w.MozBlobBuilder || $w.WebKitBlobBuilder || $w.MSBlobBuilder;\n                    var bb = new BlobBuilder();\n                    bb.append(file_data);\n                    blob = bb.getBlob(type);\n                }\n                if (navigator.msSaveBlob) {\n                    navigator.msSaveBlob(blob, name);\n                }\n                else {\n                    var URL = $w.URL || $w.webkitURL;\n                    var bloburl = URL.createObjectURL(blob);\n                    var anchor = $c('a');\n                    if ('download' in anchor) {\n                        anchor.style.visibility = 'hidden';\n                        anchor.href = bloburl;\n                        anchor.download = name;\n                        $d.body.appendChild(anchor);\n                        var evt = $d.createEvent('MouseEvents');\n                        evt.initEvent('click', true, true);\n                        anchor.dispatchEvent(evt);\n                        $d.body.removeChild(anchor);\n                    }\n                    else {\n                        location.href = bloburl;\n                    }\n                }\n            }\n        },\n        json: {\n            json2string: function (json) {\n                if (!!JSON) {\n                    try {\n                        var json_str = JSON.stringify(json);\n                        return json_str;\n                    }\n                    catch (e) {\n                        logger.warn(e);\n                        logger.warn('can not convert to string');\n                        return null;\n                    }\n                }\n            },\n            string2json: function (json_str) {\n                if (!!JSON) {\n                    try {\n                        var json = JSON.parse(json_str);\n                        return json;\n                    }\n                    catch (e) {\n                        logger.warn(e);\n                        logger.warn('can not parse to json');\n                        return null;\n                    }\n                }\n            },\n            merge: function (b, a) {\n                for (var o in a) {\n                    if (o in b) {\n                        if (typeof b[o] === 'object' &&\n                            Object.prototype.toString.call(b[o]).toLowerCase() == '[object object]' &&\n                            !b[o].length) {\n                            jm.util.json.merge(b[o], a[o]);\n                        }\n                        else {\n                            b[o] = a[o];\n                        }\n                    }\n                    else {\n                        b[o] = a[o];\n                    }\n                }\n                return b;\n            }\n        },\n        uuid: {\n            newid: function () {\n                return (new Date().getTime().toString(16) + Math.random().toString(16).substr(2)).substr(2, 16);\n            }\n        },\n        text: {\n            is_empty: function (s) {\n                if (!s) {\n                    return true;\n                }\n                return s.replace(/\\s*/, '').length == 0;\n            }\n        }\n    };\n    jm.prototype = {\n        init: function () {\n            if (this.inited) {\n                return;\n            }\n            this.inited = true;\n            var opts = this.options;\n            var opts_layout = {\n                mode: opts.mode,\n                hspace: opts.layout.hspace,\n                vspace: opts.layout.vspace,\n                pspace: opts.layout.pspace\n            };\n            var opts_view = {\n                container: opts.container,\n                support_html: opts.support_html,\n                hmargin: opts.view.hmargin,\n                vmargin: opts.view.vmargin,\n                line_width: opts.view.line_width,\n                line_color: opts.view.line_color\n            };\n            // create instance of function provider\n            this.data = new jm.data_provider(this);\n            this.layout = new jm.layout_provider(this, opts_layout);\n            this.view = new jm.view_provider(this, opts_view);\n            this.shortcut = new jm.shortcut_provider(this, opts.shortcut);\n            this.data.init();\n            this.layout.init();\n            this.view.init();\n            this.shortcut.init();\n            this._event_bind();\n            jm.init_plugins(this);\n        },\n        enable_edit: function () {\n            this.options.editable = true;\n        },\n        disable_edit: function () {\n            this.options.editable = false;\n        },\n        // call enable_event_handle('dblclick')\n        // options are 'mousedown', 'click', 'dblclick'\n        enable_event_handle: function (event_handle) {\n            this.options.default_event_handle['enable_' + event_handle + '_handle'] = true;\n        },\n        // call disable_event_handle('dblclick')\n        // options are 'mousedown', 'click', 'dblclick'\n        disable_event_handle: function (event_handle) {\n            this.options.default_event_handle['enable_' + event_handle + '_handle'] = false;\n        },\n        get_editable: function () {\n            return this.options.editable;\n        },\n        set_theme: function (theme) {\n            var theme_old = this.options.theme;\n            this.options.theme = (!!theme) ? theme : null;\n            if (theme_old != this.options.theme) {\n                this.view.reset_theme();\n                this.view.reset_custom_style();\n            }\n        },\n        _event_bind: function () {\n            this.view.add_event(this, 'mousedown', this.mousedown_handle);\n            this.view.add_event(this, 'click', this.click_handle);\n            this.view.add_event(this, 'dblclick', this.dblclick_handle);\n        },\n        mousedown_handle: function (e) {\n            if (!this.options.default_event_handle['enable_mousedown_handle']) {\n                return;\n            }\n            var element = e.target || event.srcElement;\n            var nodeid = this.view.get_binded_nodeid(element);\n            if (!!nodeid) {\n                this.select_node(nodeid);\n            }\n            else {\n                this.select_clear();\n            }\n        },\n        click_handle: function (e) {\n            if (!this.options.default_event_handle['enable_click_handle']) {\n                return;\n            }\n            var element = e.target || event.srcElement;\n            var isexpander = this.view.is_expander(element);\n            if (isexpander) {\n                var nodeid = this.view.get_binded_nodeid(element);\n                if (!!nodeid) {\n                    this.toggle_node(nodeid);\n                }\n            }\n        },\n        dblclick_handle: function (e) {\n            if (!this.options.default_event_handle['enable_dblclick_handle']) {\n                return;\n            }\n            if (this.get_editable()) {\n                var element = e.target || event.srcElement;\n                var nodeid = this.view.get_binded_nodeid(element);\n                if (!!nodeid) {\n                    this.begin_edit(nodeid);\n                }\n            }\n        },\n        begin_edit: function (node) {\n            if (!jm.util.is_node(node)) {\n                var the_node = this.get_node(node);\n                if (!the_node) {\n                    logger.error('the node[id=' + node + '] can not be found.');\n                    return false;\n                }\n                else {\n                    return this.begin_edit(the_node);\n                }\n            }\n            if (this.get_editable()) {\n                this.view.edit_node_begin(node);\n            }\n            else {\n                logger.error('fail, this mind map is not editable.');\n                return;\n            }\n        },\n        end_edit: function () {\n            this.view.edit_node_end();\n        },\n        toggle_node: function (node) {\n            if (!jm.util.is_node(node)) {\n                var the_node = this.get_node(node);\n                if (!the_node) {\n                    logger.error('the node[id=' + node + '] can not be found.');\n                    return;\n                }\n                else {\n                    return this.toggle_node(the_node);\n                }\n            }\n            if (node.isroot) {\n                return;\n            }\n            this.view.save_location(node);\n            this.layout.toggle_node(node);\n            this.view.relayout();\n            this.view.restore_location(node);\n        },\n        expand_node: function (node) {\n            if (!jm.util.is_node(node)) {\n                var the_node = this.get_node(node);\n                if (!the_node) {\n                    logger.error('the node[id=' + node + '] can not be found.');\n                    return;\n                }\n                else {\n                    return this.expand_node(the_node);\n                }\n            }\n            if (node.isroot) {\n                return;\n            }\n            this.view.save_location(node);\n            this.layout.expand_node(node);\n            this.view.relayout();\n            this.view.restore_location(node);\n        },\n        collapse_node: function (node) {\n            if (!jm.util.is_node(node)) {\n                var the_node = this.get_node(node);\n                if (!the_node) {\n                    logger.error('the node[id=' + node + '] can not be found.');\n                    return;\n                }\n                else {\n                    return this.collapse_node(the_node);\n                }\n            }\n            if (node.isroot) {\n                return;\n            }\n            this.view.save_location(node);\n            this.layout.collapse_node(node);\n            this.view.relayout();\n            this.view.restore_location(node);\n        },\n        expand_all: function () {\n            this.layout.expand_all();\n            this.view.relayout();\n        },\n        collapse_all: function () {\n            this.layout.collapse_all();\n            this.view.relayout();\n        },\n        expand_to_depth: function (depth) {\n            this.layout.expand_to_depth(depth);\n            this.view.relayout();\n        },\n        _reset: function () {\n            this.view.reset();\n            this.layout.reset();\n            this.data.reset();\n        },\n        _show: function (mind) {\n            var m = mind || jm.format.node_array.example;\n            this.mind = this.data.load(m);\n            if (!this.mind) {\n                logger.error('data.load error');\n                return;\n            }\n            else {\n                logger.debug('data.load ok');\n            }\n            this.view.load();\n            logger.debug('view.load ok');\n            this.layout.layout();\n            logger.debug('layout.layout ok');\n            this.view.show(true);\n            logger.debug('view.show ok');\n            this.invoke_event_handle(jm.event_type.show, { data: [mind] });\n        },\n        show: function (mind) {\n            this._reset();\n            this._show(mind);\n        },\n        get_meta: function () {\n            return {\n                name: this.mind.name,\n                author: this.mind.author,\n                version: this.mind.version\n            };\n        },\n        get_data: function (data_format) {\n            var df = data_format || 'node_tree';\n            return this.data.get_data(df);\n        },\n        get_root: function () {\n            return this.mind.root;\n        },\n        get_node: function (nodeid) {\n            return this.mind.get_node(nodeid);\n        },\n        add_node: function (parent_node, nodeid, topic, data) {\n            if (this.get_editable()) {\n                var node = this.mind.add_node(parent_node, nodeid, topic, data);\n                if (!!node) {\n                    this.view.add_node(node);\n                    this.layout.layout();\n                    this.view.show(false);\n                    this.view.reset_node_custom_style(node);\n                    this.expand_node(parent_node);\n                    this.invoke_event_handle(jm.event_type.edit, { evt: 'add_node', data: [parent_node.id, nodeid, topic, data], node: nodeid });\n                }\n                return node;\n            }\n            else {\n                logger.error('fail, this mind map is not editable');\n                return null;\n            }\n        },\n        insert_node_before: function (node_before, nodeid, topic, data) {\n            if (this.get_editable()) {\n                var beforeid = jm.util.is_node(node_before) ? node_before.id : node_before;\n                var node = this.mind.insert_node_before(node_before, nodeid, topic, data);\n                if (!!node) {\n                    this.view.add_node(node);\n                    this.layout.layout();\n                    this.view.show(false);\n                    this.invoke_event_handle(jm.event_type.edit, { evt: 'insert_node_before', data: [beforeid, nodeid, topic, data], node: nodeid });\n                }\n                return node;\n            }\n            else {\n                logger.error('fail, this mind map is not editable');\n                return null;\n            }\n        },\n        insert_node_after: function (node_after, nodeid, topic, data) {\n            if (this.get_editable()) {\n                var afterid = jm.util.is_node(node_after) ? node_after.id : node_after;\n                var node = this.mind.insert_node_after(node_after, nodeid, topic, data);\n                if (!!node) {\n                    this.view.add_node(node);\n                    this.layout.layout();\n                    this.view.show(false);\n                    this.invoke_event_handle(jm.event_type.edit, { evt: 'insert_node_after', data: [afterid, nodeid, topic, data], node: nodeid });\n                }\n                return node;\n            }\n            else {\n                logger.error('fail, this mind map is not editable');\n                return null;\n            }\n        },\n        remove_node: function (node) {\n            if (!jm.util.is_node(node)) {\n                var the_node = this.get_node(node);\n                if (!the_node) {\n                    logger.error('the node[id=' + node + '] can not be found.');\n                    return false;\n                }\n                else {\n                    return this.remove_node(the_node);\n                }\n            }\n            if (this.get_editable()) {\n                if (node.isroot) {\n                    logger.error('fail, can not remove root node');\n                    return false;\n                }\n                var nodeid = node.id;\n                var parentid = node.parent.id;\n                var parent_node = this.get_node(parentid);\n                this.view.save_location(parent_node);\n                this.view.remove_node(node);\n                this.mind.remove_node(node);\n                this.layout.layout();\n                this.view.show(false);\n                this.view.restore_location(parent_node);\n                this.invoke_event_handle(jm.event_type.edit, { evt: 'remove_node', data: [nodeid], node: parentid });\n                return true;\n            }\n            else {\n                logger.error('fail, this mind map is not editable');\n                return false;\n            }\n        },\n        update_node: function (nodeid, topic) {\n            if (this.get_editable()) {\n                if (jm.util.text.is_empty(topic)) {\n                    logger.warn('fail, topic can not be empty');\n                    return;\n                }\n                var node = this.get_node(nodeid);\n                if (!!node) {\n                    if (node.topic === topic) {\n                        logger.info('nothing changed');\n                        this.view.update_node(node);\n                        return;\n                    }\n                    node.topic = topic;\n                    this.view.update_node(node);\n                    this.layout.layout();\n                    this.view.show(false);\n                    this.invoke_event_handle(jm.event_type.edit, { evt: 'update_node', data: [nodeid, topic], node: nodeid });\n                }\n            }\n            else {\n                logger.error('fail, this mind map is not editable');\n                return;\n            }\n        },\n        move_node: function (nodeid, beforeid, parentid, direction) {\n            if (this.get_editable()) {\n                var node = this.mind.move_node(nodeid, beforeid, parentid, direction);\n                if (!!node) {\n                    this.view.update_node(node);\n                    this.layout.layout();\n                    this.view.show(false);\n                    this.invoke_event_handle(jm.event_type.edit, { evt: 'move_node', data: [nodeid, beforeid, parentid, direction], node: nodeid });\n                }\n            }\n            else {\n                logger.error('fail, this mind map is not editable');\n                return;\n            }\n        },\n        select_node: function (node) {\n            if (!jm.util.is_node(node)) {\n                var the_node = this.get_node(node);\n                if (!the_node) {\n                    logger.error('the node[id=' + node + '] can not be found.');\n                    return;\n                }\n                else {\n                    return this.select_node(the_node);\n                }\n            }\n            if (!this.layout.is_visible(node)) {\n                return;\n            }\n            this.mind.selected = node;\n            this.view.select_node(node);\n        },\n        get_selected_node: function () {\n            if (!!this.mind) {\n                return this.mind.selected;\n            }\n            else {\n                return null;\n            }\n        },\n        select_clear: function () {\n            if (!!this.mind) {\n                this.mind.selected = null;\n                this.view.select_clear();\n            }\n        },\n        is_node_visible: function (node) {\n            return this.layout.is_visible(node);\n        },\n        find_node_before: function (node) {\n            if (!jm.util.is_node(node)) {\n                var the_node = this.get_node(node);\n                if (!the_node) {\n                    logger.error('the node[id=' + node + '] can not be found.');\n                    return;\n                }\n                else {\n                    return this.find_node_before(the_node);\n                }\n            }\n            if (node.isroot) {\n                return null;\n            }\n            var n = null;\n            if (node.parent.isroot) {\n                var c = node.parent.children;\n                var prev = null;\n                var ni = null;\n                for (var i = 0; i < c.length; i++) {\n                    ni = c[i];\n                    if (node.direction === ni.direction) {\n                        if (node.id === ni.id) {\n                            n = prev;\n                        }\n                        prev = ni;\n                    }\n                }\n            }\n            else {\n                n = this.mind.get_node_before(node);\n            }\n            return n;\n        },\n        find_node_after: function (node) {\n            if (!jm.util.is_node(node)) {\n                var the_node = this.get_node(node);\n                if (!the_node) {\n                    logger.error('the node[id=' + node + '] can not be found.');\n                    return;\n                }\n                else {\n                    return this.find_node_after(the_node);\n                }\n            }\n            if (node.isroot) {\n                return null;\n            }\n            var n = null;\n            if (node.parent.isroot) {\n                var c = node.parent.children;\n                var getthis = false;\n                var ni = null;\n                for (var i = 0; i < c.length; i++) {\n                    ni = c[i];\n                    if (node.direction === ni.direction) {\n                        if (getthis) {\n                            n = ni;\n                            break;\n                        }\n                        if (node.id === ni.id) {\n                            getthis = true;\n                        }\n                    }\n                }\n            }\n            else {\n                n = this.mind.get_node_after(node);\n            }\n            return n;\n        },\n        set_node_color: function (nodeid, bgcolor, fgcolor) {\n            if (this.get_editable()) {\n                var node = this.mind.get_node(nodeid);\n                if (!!node) {\n                    if (!!bgcolor) {\n                        node.data['background-color'] = bgcolor;\n                    }\n                    if (!!fgcolor) {\n                        node.data['foreground-color'] = fgcolor;\n                    }\n                    this.view.reset_node_custom_style(node);\n                }\n            }\n            else {\n                logger.error('fail, this mind map is not editable');\n                return null;\n            }\n        },\n        set_node_font_style: function (nodeid, size, weight, style) {\n            if (this.get_editable()) {\n                var node = this.mind.get_node(nodeid);\n                if (!!node) {\n                    if (!!size) {\n                        node.data['font-size'] = size;\n                    }\n                    if (!!weight) {\n                        node.data['font-weight'] = weight;\n                    }\n                    if (!!style) {\n                        node.data['font-style'] = style;\n                    }\n                    this.view.reset_node_custom_style(node);\n                    this.view.update_node(node);\n                    this.layout.layout();\n                    this.view.show(false);\n                }\n            }\n            else {\n                logger.error('fail, this mind map is not editable');\n                return null;\n            }\n        },\n        set_node_background_image: function (nodeid, image, width, height, rotation) {\n            if (this.get_editable()) {\n                var node = this.mind.get_node(nodeid);\n                if (!!node) {\n                    if (!!image) {\n                        node.data['background-image'] = image;\n                    }\n                    if (!!width) {\n                        node.data['width'] = width;\n                    }\n                    if (!!height) {\n                        node.data['height'] = height;\n                    }\n                    if (!!rotation) {\n                        node.data['background-rotation'] = rotation;\n                    }\n                    this.view.reset_node_custom_style(node);\n                    this.view.update_node(node);\n                    this.layout.layout();\n                    this.view.show(false);\n                }\n            }\n            else {\n                logger.error('fail, this mind map is not editable');\n                return null;\n            }\n        },\n        set_node_background_rotation: function (nodeid, rotation) {\n            if (this.get_editable()) {\n                var node = this.mind.get_node(nodeid);\n                if (!!node) {\n                    if (!node.data['background-image']) {\n                        logger.error('fail, only can change rotation angle of node with background image');\n                        return null;\n                    }\n                    node.data['background-rotation'] = rotation;\n                    this.view.reset_node_custom_style(node);\n                    this.view.update_node(node);\n                    this.layout.layout();\n                    this.view.show(false);\n                }\n            }\n            else {\n                logger.error('fail, this mind map is not editable');\n                return null;\n            }\n        },\n        resize: function () {\n            this.view.resize();\n        },\n        // callback(type ,data)\n        add_event_listener: function (callback) {\n            if (typeof callback === 'function') {\n                this.event_handles.push(callback);\n            }\n        },\n        invoke_event_handle: function (type, data) {\n            var j = this;\n            $w.setTimeout(function () {\n                j._invoke_event_handle(type, data);\n            }, 0);\n        },\n        _invoke_event_handle: function (type, data) {\n            var l = this.event_handles.length;\n            for (var i = 0; i < l; i++) {\n                this.event_handles[i](type, data);\n            }\n        }\n    };\n    // ============= data provider =============================================\n    jm.data_provider = function (jm) {\n        this.jm = jm;\n    };\n    jm.data_provider.prototype = {\n        init: function () {\n            logger.debug('data.init');\n        },\n        reset: function () {\n            logger.debug('data.reset');\n        },\n        load: function (mind_data) {\n            var df = null;\n            var mind = null;\n            if (typeof mind_data === 'object') {\n                if (!!mind_data.format) {\n                    df = mind_data.format;\n                }\n                else {\n                    df = 'node_tree';\n                }\n            }\n            else {\n                df = 'freemind';\n            }\n            if (df == 'node_array') {\n                mind = jm.format.node_array.get_mind(mind_data);\n            }\n            else if (df == 'node_tree') {\n                mind = jm.format.node_tree.get_mind(mind_data);\n            }\n            else if (df == 'freemind') {\n                mind = jm.format.freemind.get_mind(mind_data);\n            }\n            else {\n                logger.warn('unsupported format');\n            }\n            return mind;\n        },\n        get_data: function (data_format) {\n            var data = null;\n            if (data_format == 'node_array') {\n                data = jm.format.node_array.get_data(this.jm.mind);\n            }\n            else if (data_format == 'node_tree') {\n                data = jm.format.node_tree.get_data(this.jm.mind);\n            }\n            else if (data_format == 'freemind') {\n                data = jm.format.freemind.get_data(this.jm.mind);\n            }\n            else {\n                logger.error('unsupported ' + data_format + ' format');\n            }\n            return data;\n        },\n    };\n    // ============= layout provider ===========================================\n    jm.layout_provider = function (jm, options) {\n        this.opts = options;\n        this.jm = jm;\n        this.isside = (this.opts.mode == 'side');\n        this.bounds = null;\n        this.cache_valid = false;\n    };\n    jm.layout_provider.prototype = {\n        init: function () {\n            logger.debug('layout.init');\n        },\n        reset: function () {\n            logger.debug('layout.reset');\n            this.bounds = { n: 0, s: 0, w: 0, e: 0 };\n        },\n        layout: function () {\n            logger.debug('layout.layout');\n            this.layout_direction();\n            this.layout_offset();\n        },\n        layout_direction: function () {\n            this._layout_direction_root();\n        },\n        _layout_direction_root: function () {\n            var node = this.jm.mind.root;\n            // logger.debug(node);\n            var layout_data = null;\n            if ('layout' in node._data) {\n                layout_data = node._data.layout;\n            }\n            else {\n                layout_data = {};\n                node._data.layout = layout_data;\n            }\n            var children = node.children;\n            var children_count = children.length;\n            layout_data.direction = jm.direction.center;\n            layout_data.side_index = 0;\n            if (this.isside) {\n                var i = children_count;\n                while (i--) {\n                    this._layout_direction_side(children[i], jm.direction.right, i);\n                }\n            }\n            else {\n                var i = children_count;\n                var subnode = null;\n                while (i--) {\n                    subnode = children[i];\n                    if (subnode.direction == jm.direction.left) {\n                        this._layout_direction_side(subnode, jm.direction.left, i);\n                    }\n                    else {\n                        this._layout_direction_side(subnode, jm.direction.right, i);\n                    }\n                }\n                /*\n                var boundary = Math.ceil(children_count/2);\n                var i = children_count;\n                while(i--){\n                    if(i>=boundary){\n                        this._layout_direction_side(children[i],jm.direction.left, children_count-i-1);\n                    }else{\n                        this._layout_direction_side(children[i],jm.direction.right, i);\n                    }\n                }*/\n            }\n        },\n        _layout_direction_side: function (node, direction, side_index) {\n            var layout_data = null;\n            if ('layout' in node._data) {\n                layout_data = node._data.layout;\n            }\n            else {\n                layout_data = {};\n                node._data.layout = layout_data;\n            }\n            var children = node.children;\n            var children_count = children.length;\n            layout_data.direction = direction;\n            layout_data.side_index = side_index;\n            var i = children_count;\n            while (i--) {\n                this._layout_direction_side(children[i], direction, i);\n            }\n        },\n        layout_offset: function () {\n            var node = this.jm.mind.root;\n            var layout_data = node._data.layout;\n            layout_data.offset_x = 0;\n            layout_data.offset_y = 0;\n            layout_data.outer_height = 0;\n            var children = node.children;\n            var i = children.length;\n            var left_nodes = [];\n            var right_nodes = [];\n            var subnode = null;\n            while (i--) {\n                subnode = children[i];\n                if (subnode._data.layout.direction == jm.direction.right) {\n                    right_nodes.unshift(subnode);\n                }\n                else {\n                    left_nodes.unshift(subnode);\n                }\n            }\n            layout_data.left_nodes = left_nodes;\n            layout_data.right_nodes = right_nodes;\n            layout_data.outer_height_left = this._layout_offset_subnodes(left_nodes);\n            layout_data.outer_height_right = this._layout_offset_subnodes(right_nodes);\n            this.bounds.e = node._data.view.width / 2;\n            this.bounds.w = 0 - this.bounds.e;\n            //logger.debug(this.bounds.w);\n            this.bounds.n = 0;\n            this.bounds.s = Math.max(layout_data.outer_height_left, layout_data.outer_height_right);\n        },\n        // layout both the x and y axis\n        _layout_offset_subnodes: function (nodes) {\n            var total_height = 0;\n            var nodes_count = nodes.length;\n            var i = nodes_count;\n            var node = null;\n            var node_outer_height = 0;\n            var layout_data = null;\n            var base_y = 0;\n            var pd = null; // parent._data\n            while (i--) {\n                node = nodes[i];\n                layout_data = node._data.layout;\n                if (pd == null) {\n                    pd = node.parent._data;\n                }\n                node_outer_height = this._layout_offset_subnodes(node.children);\n                if (!node.expanded) {\n                    node_outer_height = 0;\n                    this.set_visible(node.children, false);\n                }\n                node_outer_height = Math.max(node._data.view.height, node_outer_height);\n                layout_data.outer_height = node_outer_height;\n                layout_data.offset_y = base_y - node_outer_height / 2;\n                layout_data.offset_x = this.opts.hspace * layout_data.direction + pd.view.width * (pd.layout.direction + layout_data.direction) / 2;\n                if (!node.parent.isroot) {\n                    layout_data.offset_x += this.opts.pspace * layout_data.direction;\n                }\n                base_y = base_y - node_outer_height - this.opts.vspace;\n                total_height += node_outer_height;\n            }\n            if (nodes_count > 1) {\n                total_height += this.opts.vspace * (nodes_count - 1);\n            }\n            i = nodes_count;\n            var middle_height = total_height / 2;\n            while (i--) {\n                node = nodes[i];\n                node._data.layout.offset_y += middle_height;\n            }\n            return total_height;\n        },\n        // layout the y axis only, for collapse/expand a node\n        _layout_offset_subnodes_height: function (nodes) {\n            var total_height = 0;\n            var nodes_count = nodes.length;\n            var i = nodes_count;\n            var node = null;\n            var node_outer_height = 0;\n            var layout_data = null;\n            var base_y = 0;\n            var pd = null; // parent._data\n            while (i--) {\n                node = nodes[i];\n                layout_data = node._data.layout;\n                if (pd == null) {\n                    pd = node.parent._data;\n                }\n                node_outer_height = this._layout_offset_subnodes_height(node.children);\n                if (!node.expanded) {\n                    node_outer_height = 0;\n                }\n                node_outer_height = Math.max(node._data.view.height, node_outer_height);\n                layout_data.outer_height = node_outer_height;\n                layout_data.offset_y = base_y - node_outer_height / 2;\n                base_y = base_y - node_outer_height - this.opts.vspace;\n                total_height += node_outer_height;\n            }\n            if (nodes_count > 1) {\n                total_height += this.opts.vspace * (nodes_count - 1);\n            }\n            i = nodes_count;\n            var middle_height = total_height / 2;\n            while (i--) {\n                node = nodes[i];\n                node._data.layout.offset_y += middle_height;\n                //logger.debug(node.topic);\n                //logger.debug(node._data.layout.offset_y);\n            }\n            return total_height;\n        },\n        get_node_offset: function (node) {\n            var layout_data = node._data.layout;\n            var offset_cache = null;\n            if (('_offset_' in layout_data) && this.cache_valid) {\n                offset_cache = layout_data._offset_;\n            }\n            else {\n                offset_cache = { x: -1, y: -1 };\n                layout_data._offset_ = offset_cache;\n            }\n            if (offset_cache.x == -1 || offset_cache.y == -1) {\n                var x = layout_data.offset_x;\n                var y = layout_data.offset_y;\n                if (!node.isroot) {\n                    var offset_p = this.get_node_offset(node.parent);\n                    x += offset_p.x;\n                    y += offset_p.y;\n                }\n                offset_cache.x = x;\n                offset_cache.y = y;\n            }\n            return offset_cache;\n        },\n        get_node_point: function (node) {\n            var view_data = node._data.view;\n            var offset_p = this.get_node_offset(node);\n            //logger.debug(offset_p);\n            var p = {};\n            p.x = offset_p.x + view_data.width * (node._data.layout.direction - 1) / 2;\n            p.y = offset_p.y - view_data.height / 2;\n            //logger.debug(p);\n            return p;\n        },\n        get_node_point_in: function (node) {\n            var p = this.get_node_offset(node);\n            return p;\n        },\n        get_node_point_out: function (node) {\n            var layout_data = node._data.layout;\n            var pout_cache = null;\n            if (('_pout_' in layout_data) && this.cache_valid) {\n                pout_cache = layout_data._pout_;\n            }\n            else {\n                pout_cache = { x: -1, y: -1 };\n                layout_data._pout_ = pout_cache;\n            }\n            if (pout_cache.x == -1 || pout_cache.y == -1) {\n                if (node.isroot) {\n                    pout_cache.x = 0;\n                    pout_cache.y = 0;\n                }\n                else {\n                    var view_data = node._data.view;\n                    var offset_p = this.get_node_offset(node);\n                    pout_cache.x = offset_p.x + (view_data.width + this.opts.pspace) * node._data.layout.direction;\n                    pout_cache.y = offset_p.y;\n                    //logger.debug('pout');\n                    //logger.debug(pout_cache);\n                }\n            }\n            return pout_cache;\n        },\n        get_expander_point: function (node) {\n            var p = this.get_node_point_out(node);\n            var ex_p = {};\n            if (node._data.layout.direction == jm.direction.right) {\n                ex_p.x = p.x - this.opts.pspace;\n            }\n            else {\n                ex_p.x = p.x;\n            }\n            ex_p.y = p.y - Math.ceil(this.opts.pspace / 2);\n            return ex_p;\n        },\n        get_min_size: function () {\n            var nodes = this.jm.mind.nodes;\n            var node = null;\n            var pout = null;\n            for (var nodeid in nodes) {\n                node = nodes[nodeid];\n                pout = this.get_node_point_out(node);\n                //logger.debug(pout.x);\n                if (pout.x > this.bounds.e) {\n                    this.bounds.e = pout.x;\n                }\n                if (pout.x < this.bounds.w) {\n                    this.bounds.w = pout.x;\n                }\n            }\n            return {\n                w: this.bounds.e - this.bounds.w,\n                h: this.bounds.s - this.bounds.n\n            };\n        },\n        toggle_node: function (node) {\n            if (node.isroot) {\n                return;\n            }\n            if (node.expanded) {\n                this.collapse_node(node);\n            }\n            else {\n                this.expand_node(node);\n            }\n        },\n        expand_node: function (node) {\n            node.expanded = true;\n            this.part_layout(node);\n            this.set_visible(node.children, true);\n        },\n        collapse_node: function (node) {\n            node.expanded = false;\n            this.part_layout(node);\n            this.set_visible(node.children, false);\n        },\n        expand_all: function () {\n            var nodes = this.jm.mind.nodes;\n            var c = 0;\n            var node;\n            for (var nodeid in nodes) {\n                node = nodes[nodeid];\n                if (!node.expanded) {\n                    node.expanded = true;\n                    c++;\n                }\n            }\n            if (c > 0) {\n                var root = this.jm.mind.root;\n                this.part_layout(root);\n                this.set_visible(root.children, true);\n            }\n        },\n        collapse_all: function () {\n            var nodes = this.jm.mind.nodes;\n            var c = 0;\n            var node;\n            for (var nodeid in nodes) {\n                node = nodes[nodeid];\n                if (node.expanded && !node.isroot) {\n                    node.expanded = false;\n                    c++;\n                }\n            }\n            if (c > 0) {\n                var root = this.jm.mind.root;\n                this.part_layout(root);\n                this.set_visible(root.children, true);\n            }\n        },\n        expand_to_depth: function (target_depth, curr_nodes, curr_depth) {\n            if (target_depth < 1) {\n                return;\n            }\n            var nodes = curr_nodes || this.jm.mind.root.children;\n            var depth = curr_depth || 1;\n            var i = nodes.length;\n            var node = null;\n            while (i--) {\n                node = nodes[i];\n                if (depth < target_depth) {\n                    if (!node.expanded) {\n                        this.expand_node(node);\n                    }\n                    this.expand_to_depth(target_depth, node.children, depth + 1);\n                }\n                if (depth == target_depth) {\n                    if (node.expanded) {\n                        this.collapse_node(node);\n                    }\n                }\n            }\n        },\n        part_layout: function (node) {\n            var root = this.jm.mind.root;\n            if (!!root) {\n                var root_layout_data = root._data.layout;\n                if (node.isroot) {\n                    root_layout_data.outer_height_right = this._layout_offset_subnodes_height(root_layout_data.right_nodes);\n                    root_layout_data.outer_height_left = this._layout_offset_subnodes_height(root_layout_data.left_nodes);\n                }\n                else {\n                    if (node._data.layout.direction == jm.direction.right) {\n                        root_layout_data.outer_height_right = this._layout_offset_subnodes_height(root_layout_data.right_nodes);\n                    }\n                    else {\n                        root_layout_data.outer_height_left = this._layout_offset_subnodes_height(root_layout_data.left_nodes);\n                    }\n                }\n                this.bounds.s = Math.max(root_layout_data.outer_height_left, root_layout_data.outer_height_right);\n                this.cache_valid = false;\n            }\n            else {\n                logger.warn('can not found root node');\n            }\n        },\n        set_visible: function (nodes, visible) {\n            var i = nodes.length;\n            var node = null;\n            var layout_data = null;\n            while (i--) {\n                node = nodes[i];\n                layout_data = node._data.layout;\n                if (node.expanded) {\n                    this.set_visible(node.children, visible);\n                }\n                else {\n                    this.set_visible(node.children, false);\n                }\n                if (!node.isroot) {\n                    node._data.layout.visible = visible;\n                }\n            }\n        },\n        is_expand: function (node) {\n            return node.expanded;\n        },\n        is_visible: function (node) {\n            var layout_data = node._data.layout;\n            if (('visible' in layout_data) && !layout_data.visible) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        },\n    };\n    // view provider\n    jm.view_provider = function (jm, options) {\n        this.opts = options;\n        this.jm = jm;\n        this.layout = jm.layout;\n        this.container = null;\n        this.e_panel = null;\n        this.e_nodes = null;\n        this.e_canvas = null;\n        this.canvas_ctx = null;\n        this.size = { w: 0, h: 0 };\n        this.selected_node = null;\n        this.editing_node = null;\n    };\n    jm.view_provider.prototype = {\n        init: function () {\n            logger.debug('view.init');\n            this.container = $i(this.opts.container) ? this.opts.container : $g(this.opts.container);\n            if (!this.container) {\n                logger.error('the options.view.container was not be found in dom');\n                return;\n            }\n            this.e_panel = $c('div');\n            this.e_canvas = $c('canvas');\n            this.e_nodes = $c('jmnodes');\n            this.e_editor = $c('input');\n            this.e_panel.className = 'jsmind-inner';\n            this.e_panel.appendChild(this.e_canvas);\n            this.e_panel.appendChild(this.e_nodes);\n            this.e_editor.className = 'jsmind-editor';\n            this.e_editor.type = 'text';\n            this.actualZoom = 1;\n            this.zoomStep = 0.1;\n            this.minZoom = 0.5;\n            this.maxZoom = 2;\n            var v = this;\n            jm.util.dom.add_event(this.e_editor, 'keydown', function (e) {\n                var evt = e || event;\n                if (evt.keyCode == 13) {\n                    v.edit_node_end();\n                    evt.stopPropagation();\n                }\n            });\n            jm.util.dom.add_event(this.e_editor, 'blur', function (e) {\n                v.edit_node_end();\n            });\n            this.container.appendChild(this.e_panel);\n            this.init_canvas();\n        },\n        add_event: function (obj, event_name, event_handle) {\n            jm.util.dom.add_event(this.e_nodes, event_name, function (e) {\n                var evt = e || event;\n                event_handle.call(obj, evt);\n            });\n        },\n        get_binded_nodeid: function (element) {\n            if (element == null) {\n                return null;\n            }\n            var tagName = element.tagName.toLowerCase();\n            if (tagName == 'jmnodes' || tagName == 'body' || tagName == 'html') {\n                return null;\n            }\n            if (tagName == 'jmnode' || tagName == 'jmexpander') {\n                return element.getAttribute('nodeid');\n            }\n            else {\n                return this.get_binded_nodeid(element.parentElement);\n            }\n        },\n        is_expander: function (element) {\n            return (element.tagName.toLowerCase() == 'jmexpander');\n        },\n        reset: function () {\n            logger.debug('view.reset');\n            this.selected_node = null;\n            this.clear_lines();\n            this.clear_nodes();\n            this.reset_theme();\n        },\n        reset_theme: function () {\n            var theme_name = this.jm.options.theme;\n            if (!!theme_name) {\n                this.e_nodes.className = 'theme-' + theme_name;\n            }\n            else {\n                this.e_nodes.className = '';\n            }\n        },\n        reset_custom_style: function () {\n            var nodes = this.jm.mind.nodes;\n            for (var nodeid in nodes) {\n                this.reset_node_custom_style(nodes[nodeid]);\n            }\n        },\n        load: function () {\n            logger.debug('view.load');\n            this.init_nodes();\n        },\n        expand_size: function () {\n            var min_size = this.layout.get_min_size();\n            var min_width = min_size.w + this.opts.hmargin * 2;\n            var min_height = min_size.h + this.opts.vmargin * 2;\n            var client_w = this.e_panel.clientWidth;\n            var client_h = this.e_panel.clientHeight;\n            if (client_w < min_width) {\n                client_w = min_width;\n            }\n            if (client_h < min_height) {\n                client_h = min_height;\n            }\n            this.size.w = client_w;\n            this.size.h = client_h;\n        },\n        init_canvas: function () {\n            var ctx = this.e_canvas.getContext('2d');\n            this.canvas_ctx = ctx;\n        },\n        init_nodes_size: function (node) {\n            var view_data = node._data.view;\n            view_data.width = view_data.element.clientWidth;\n            view_data.height = view_data.element.clientHeight;\n        },\n        init_nodes: function () {\n            var nodes = this.jm.mind.nodes;\n            var doc_frag = $d.createDocumentFragment();\n            for (var nodeid in nodes) {\n                this.create_node_element(nodes[nodeid], doc_frag);\n            }\n            this.e_nodes.appendChild(doc_frag);\n            for (var nodeid in nodes) {\n                this.init_nodes_size(nodes[nodeid]);\n            }\n        },\n        add_node: function (node) {\n            this.create_node_element(node, this.e_nodes);\n            this.init_nodes_size(node);\n        },\n        create_node_element: function (node, parent_node) {\n            var view_data = null;\n            if ('view' in node._data) {\n                view_data = node._data.view;\n            }\n            else {\n                view_data = {};\n                node._data.view = view_data;\n            }\n            var d = $c('jmnode');\n            if (node.isroot) {\n                d.className = 'root';\n            }\n            else {\n                var d_e = $c('jmexpander');\n                $t(d_e, '-');\n                d_e.setAttribute('nodeid', node.id);\n                d_e.style.visibility = 'hidden';\n                parent_node.appendChild(d_e);\n                view_data.expander = d_e;\n            }\n            if (!!node.topic) {\n                if (this.opts.support_html) {\n                    $h(d, node.topic);\n                }\n                else {\n                    $t(d, node.topic);\n                }\n            }\n            d.setAttribute('nodeid', node.id);\n            d.style.visibility = 'hidden';\n            this._reset_node_custom_style(d, node.data);\n            parent_node.appendChild(d);\n            view_data.element = d;\n        },\n        remove_node: function (node) {\n            if (this.selected_node != null && this.selected_node.id == node.id) {\n                this.selected_node = null;\n            }\n            if (this.editing_node != null && this.editing_node.id == node.id) {\n                node._data.view.element.removeChild(this.e_editor);\n                this.editing_node = null;\n            }\n            var children = node.children;\n            var i = children.length;\n            while (i--) {\n                this.remove_node(children[i]);\n            }\n            if (node._data.view) {\n                var element = node._data.view.element;\n                var expander = node._data.view.expander;\n                this.e_nodes.removeChild(element);\n                this.e_nodes.removeChild(expander);\n                node._data.view.element = null;\n                node._data.view.expander = null;\n            }\n        },\n        update_node: function (node) {\n            var view_data = node._data.view;\n            var element = view_data.element;\n            if (!!node.topic) {\n                if (this.opts.support_html) {\n                    $h(element, node.topic);\n                }\n                else {\n                    $t(element, node.topic);\n                }\n            }\n            view_data.width = element.clientWidth;\n            view_data.height = element.clientHeight;\n        },\n        select_node: function (node) {\n            if (!!this.selected_node) {\n                this.selected_node._data.view.element.className =\n                    this.selected_node._data.view.element.className.replace(/\\s*selected\\b/i, '');\n                this.reset_node_custom_style(this.selected_node);\n            }\n            if (!!node) {\n                this.selected_node = node;\n                node._data.view.element.className += ' selected';\n                this.clear_node_custom_style(node);\n            }\n        },\n        select_clear: function () {\n            this.select_node(null);\n        },\n        get_editing_node: function () {\n            return this.editing_node;\n        },\n        is_editing: function () {\n            return (!!this.editing_node);\n        },\n        edit_node_begin: function (node) {\n            if (!node.topic) {\n                logger.warn(\"don't edit image nodes\");\n                return;\n            }\n            if (this.editing_node != null) {\n                this.edit_node_end();\n            }\n            this.editing_node = node;\n            var view_data = node._data.view;\n            var element = view_data.element;\n            var topic = node.topic;\n            var ncs = getComputedStyle(element);\n            this.e_editor.value = topic;\n            this.e_editor.style.width = (element.clientWidth - parseInt(ncs.getPropertyValue('padding-left')) - parseInt(ncs.getPropertyValue('padding-right'))) + 'px';\n            element.innerHTML = '';\n            element.appendChild(this.e_editor);\n            element.style.zIndex = 5;\n            this.e_editor.focus();\n            this.e_editor.select();\n        },\n        edit_node_end: function () {\n            if (this.editing_node != null) {\n                var node = this.editing_node;\n                this.editing_node = null;\n                var view_data = node._data.view;\n                var element = view_data.element;\n                var topic = this.e_editor.value;\n                element.style.zIndex = 'auto';\n                element.removeChild(this.e_editor);\n                if (jm.util.text.is_empty(topic) || node.topic === topic) {\n                    if (this.opts.support_html) {\n                        $h(element, node.topic);\n                    }\n                    else {\n                        $t(element, node.topic);\n                    }\n                }\n                else {\n                    this.jm.update_node(node.id, topic);\n                }\n            }\n        },\n        get_view_offset: function () {\n            var bounds = this.layout.bounds;\n            var _x = (this.size.w - bounds.e - bounds.w) / 2;\n            var _y = this.size.h / 2;\n            return { x: _x, y: _y };\n        },\n        resize: function () {\n            this.e_canvas.width = 1;\n            this.e_canvas.height = 1;\n            this.e_nodes.style.width = '1px';\n            this.e_nodes.style.height = '1px';\n            this.expand_size();\n            this._show();\n        },\n        _show: function () {\n            this.e_canvas.width = this.size.w;\n            this.e_canvas.height = this.size.h;\n            this.e_nodes.style.width = this.size.w + 'px';\n            this.e_nodes.style.height = this.size.h + 'px';\n            this.show_nodes();\n            this.show_lines();\n            //this.layout.cache_valid = true;\n            this.jm.invoke_event_handle(jm.event_type.resize, { data: [] });\n        },\n        zoomIn: function () {\n            return this.setZoom(this.actualZoom + this.zoomStep);\n        },\n        zoomOut: function () {\n            return this.setZoom(this.actualZoom - this.zoomStep);\n        },\n        setZoom: function (zoom) {\n            if ((zoom < this.minZoom) || (zoom > this.maxZoom)) {\n                return false;\n            }\n            this.actualZoom = zoom;\n            for (var i = 0; i < this.e_panel.children.length; i++) {\n                this.e_panel.children[i].style.transform = 'scale(' + zoom + ')';\n            }\n            ;\n            this.show(true);\n            return true;\n        },\n        _center_root: function () {\n            // center root node\n            var outer_w = this.e_panel.clientWidth;\n            var outer_h = this.e_panel.clientHeight;\n            if (this.size.w > outer_w) {\n                var _offset = this.get_view_offset();\n                this.e_panel.scrollLeft = _offset.x - outer_w / 2;\n            }\n            if (this.size.h > outer_h) {\n                this.e_panel.scrollTop = (this.size.h - outer_h) / 2;\n            }\n        },\n        show: function (keep_center) {\n            logger.debug('view.show');\n            this.expand_size();\n            this._show();\n            if (!!keep_center) {\n                this._center_root();\n            }\n        },\n        relayout: function () {\n            this.expand_size();\n            this._show();\n        },\n        save_location: function (node) {\n            var vd = node._data.view;\n            vd._saved_location = {\n                x: parseInt(vd.element.style.left) - this.e_panel.scrollLeft,\n                y: parseInt(vd.element.style.top) - this.e_panel.scrollTop,\n            };\n        },\n        restore_location: function (node) {\n            var vd = node._data.view;\n            this.e_panel.scrollLeft = parseInt(vd.element.style.left) - vd._saved_location.x;\n            this.e_panel.scrollTop = parseInt(vd.element.style.top) - vd._saved_location.y;\n        },\n        clear_nodes: function () {\n            var mind = this.jm.mind;\n            if (mind == null) {\n                return;\n            }\n            var nodes = mind.nodes;\n            var node = null;\n            for (var nodeid in nodes) {\n                node = nodes[nodeid];\n                node._data.view.element = null;\n                node._data.view.expander = null;\n            }\n            this.e_nodes.innerHTML = '';\n        },\n        show_nodes: function () {\n            var nodes = this.jm.mind.nodes;\n            var node = null;\n            var node_element = null;\n            var expander = null;\n            var p = null;\n            var p_expander = null;\n            var expander_text = '-';\n            var view_data = null;\n            var _offset = this.get_view_offset();\n            for (var nodeid in nodes) {\n                node = nodes[nodeid];\n                view_data = node._data.view;\n                node_element = view_data.element;\n                expander = view_data.expander;\n                if (!this.layout.is_visible(node)) {\n                    node_element.style.display = 'none';\n                    expander.style.display = 'none';\n                    continue;\n                }\n                this.reset_node_custom_style(node);\n                p = this.layout.get_node_point(node);\n                view_data.abs_x = _offset.x + p.x;\n                view_data.abs_y = _offset.y + p.y;\n                node_element.style.left = (_offset.x + p.x) + 'px';\n                node_element.style.top = (_offset.y + p.y) + 'px';\n                node_element.style.display = '';\n                node_element.style.visibility = 'visible';\n                if (!node.isroot && node.children.length > 0) {\n                    expander_text = node.expanded ? '-' : '+';\n                    p_expander = this.layout.get_expander_point(node);\n                    expander.style.left = (_offset.x + p_expander.x) + 'px';\n                    expander.style.top = (_offset.y + p_expander.y) + 'px';\n                    expander.style.display = '';\n                    expander.style.visibility = 'visible';\n                    $t(expander, expander_text);\n                }\n                // hide expander while all children have been removed\n                if (!node.isroot && node.children.length == 0) {\n                    expander.style.display = 'none';\n                    expander.style.visibility = 'hidden';\n                }\n            }\n        },\n        reset_node_custom_style: function (node) {\n            this._reset_node_custom_style(node._data.view.element, node.data);\n        },\n        _reset_node_custom_style: function (node_element, node_data) {\n            if ('background-color' in node_data) {\n                node_element.style.backgroundColor = node_data['background-color'];\n            }\n            if ('foreground-color' in node_data) {\n                node_element.style.color = node_data['foreground-color'];\n            }\n            if ('width' in node_data) {\n                node_element.style.width = node_data['width'] + 'px';\n            }\n            if ('height' in node_data) {\n                node_element.style.height = node_data['height'] + 'px';\n            }\n            if ('font-size' in node_data) {\n                node_element.style.fontSize = node_data['font-size'] + 'px';\n            }\n            if ('font-weight' in node_data) {\n                node_element.style.fontWeight = node_data['font-weight'];\n            }\n            if ('font-style' in node_data) {\n                node_element.style.fontStyle = node_data['font-style'];\n            }\n            if ('background-image' in node_data) {\n                var backgroundImage = node_data['background-image'];\n                if (backgroundImage.startsWith('data') && node_data['width'] && node_data['height']) {\n                    var img = new Image();\n                    img.onload = function () {\n                        var c = $c('canvas');\n                        c.width = node_element.clientWidth;\n                        c.height = node_element.clientHeight;\n                        var img = this;\n                        if (c.getContext) {\n                            var ctx = c.getContext('2d');\n                            ctx.drawImage(img, 2, 2, node_element.clientWidth, node_element.clientHeight);\n                            var scaledImageData = c.toDataURL();\n                            node_element.style.backgroundImage = 'url(' + scaledImageData + ')';\n                        }\n                    };\n                    img.src = backgroundImage;\n                }\n                else {\n                    node_element.style.backgroundImage = 'url(' + backgroundImage + ')';\n                }\n                node_element.style.backgroundSize = '99%';\n                if ('background-rotation' in node_data) {\n                    node_element.style.transform = 'rotate(' + node_data['background-rotation'] + 'deg)';\n                }\n            }\n        },\n        clear_node_custom_style: function (node) {\n            var node_element = node._data.view.element;\n            node_element.style.backgroundColor = \"\";\n            node_element.style.color = \"\";\n        },\n        clear_lines: function (canvas_ctx) {\n            var ctx = canvas_ctx || this.canvas_ctx;\n            jm.util.canvas.clear(ctx, 0, 0, this.size.w, this.size.h);\n        },\n        show_lines: function (canvas_ctx) {\n            this.clear_lines(canvas_ctx);\n            var nodes = this.jm.mind.nodes;\n            var node = null;\n            var pin = null;\n            var pout = null;\n            var _offset = this.get_view_offset();\n            for (var nodeid in nodes) {\n                node = nodes[nodeid];\n                if (!!node.isroot) {\n                    continue;\n                }\n                if (('visible' in node._data.layout) && !node._data.layout.visible) {\n                    continue;\n                }\n                pin = this.layout.get_node_point_in(node);\n                pout = this.layout.get_node_point_out(node.parent);\n                this.draw_line(pout, pin, _offset, canvas_ctx);\n            }\n        },\n        draw_line: function (pin, pout, offset, canvas_ctx) {\n            var ctx = canvas_ctx || this.canvas_ctx;\n            ctx.strokeStyle = this.opts.line_color;\n            ctx.lineWidth = this.opts.line_width;\n            ctx.lineCap = 'round';\n            jm.util.canvas.bezierto(ctx, pin.x + offset.x, pin.y + offset.y, pout.x + offset.x, pout.y + offset.y);\n        },\n    };\n    // shortcut provider\n    jm.shortcut_provider = function (jm, options) {\n        this.jm = jm;\n        this.opts = options;\n        this.mapping = options.mapping;\n        this.handles = options.handles;\n        this._mapping = {};\n    };\n    jm.shortcut_provider.prototype = {\n        init: function () {\n            jm.util.dom.add_event($d, 'keydown', this.handler.bind(this));\n            this.handles['addchild'] = this.handle_addchild;\n            this.handles['addbrother'] = this.handle_addbrother;\n            this.handles['editnode'] = this.handle_editnode;\n            this.handles['delnode'] = this.handle_delnode;\n            this.handles['toggle'] = this.handle_toggle;\n            this.handles['up'] = this.handle_up;\n            this.handles['down'] = this.handle_down;\n            this.handles['left'] = this.handle_left;\n            this.handles['right'] = this.handle_right;\n            for (var handle in this.mapping) {\n                if (!!this.mapping[handle] && (handle in this.handles)) {\n                    this._mapping[this.mapping[handle]] = this.handles[handle];\n                }\n            }\n        },\n        enable_shortcut: function () {\n            this.opts.enable = true;\n        },\n        disable_shortcut: function () {\n            this.opts.enable = false;\n        },\n        handler: function (e) {\n            if (this.jm.view.is_editing()) {\n                return;\n            }\n            var evt = e || event;\n            if (!this.opts.enable) {\n                return true;\n            }\n            var kc = evt.keyCode;\n            if (kc in this._mapping) {\n                this._mapping[kc].call(this, this.jm, e);\n            }\n        },\n        handle_addchild: function (_jm, e) {\n            var selected_node = _jm.get_selected_node();\n            if (!!selected_node) {\n                var nodeid = jm.util.uuid.newid();\n                var node = _jm.add_node(selected_node, nodeid, 'New Node');\n                if (!!node) {\n                    _jm.select_node(nodeid);\n                    _jm.begin_edit(nodeid);\n                }\n            }\n        },\n        handle_addbrother: function (_jm, e) {\n            var selected_node = _jm.get_selected_node();\n            if (!!selected_node && !selected_node.isroot) {\n                var nodeid = jm.util.uuid.newid();\n                var node = _jm.insert_node_after(selected_node, nodeid, 'New Node');\n                if (!!node) {\n                    _jm.select_node(nodeid);\n                    _jm.begin_edit(nodeid);\n                }\n            }\n        },\n        handle_editnode: function (_jm, e) {\n            var selected_node = _jm.get_selected_node();\n            if (!!selected_node) {\n                _jm.begin_edit(selected_node);\n            }\n        },\n        handle_delnode: function (_jm, e) {\n            var selected_node = _jm.get_selected_node();\n            if (!!selected_node && !selected_node.isroot) {\n                _jm.select_node(selected_node.parent);\n                _jm.remove_node(selected_node);\n            }\n        },\n        handle_toggle: function (_jm, e) {\n            var evt = e || event;\n            var selected_node = _jm.get_selected_node();\n            if (!!selected_node) {\n                _jm.toggle_node(selected_node.id);\n                evt.stopPropagation();\n                evt.preventDefault();\n            }\n        },\n        handle_up: function (_jm, e) {\n            var evt = e || event;\n            var selected_node = _jm.get_selected_node();\n            if (!!selected_node) {\n                var up_node = _jm.find_node_before(selected_node);\n                if (!up_node) {\n                    var np = _jm.find_node_before(selected_node.parent);\n                    if (!!np && np.children.length > 0) {\n                        up_node = np.children[np.children.length - 1];\n                    }\n                }\n                if (!!up_node) {\n                    _jm.select_node(up_node);\n                }\n                evt.stopPropagation();\n                evt.preventDefault();\n            }\n        },\n        handle_down: function (_jm, e) {\n            var evt = e || event;\n            var selected_node = _jm.get_selected_node();\n            if (!!selected_node) {\n                var down_node = _jm.find_node_after(selected_node);\n                if (!down_node) {\n                    var np = _jm.find_node_after(selected_node.parent);\n                    if (!!np && np.children.length > 0) {\n                        down_node = np.children[0];\n                    }\n                }\n                if (!!down_node) {\n                    _jm.select_node(down_node);\n                }\n                evt.stopPropagation();\n                evt.preventDefault();\n            }\n        },\n        handle_left: function (_jm, e) {\n            this._handle_direction(_jm, e, jm.direction.left);\n        },\n        handle_right: function (_jm, e) {\n            this._handle_direction(_jm, e, jm.direction.right);\n        },\n        _handle_direction: function (_jm, e, d) {\n            var evt = e || event;\n            var selected_node = _jm.get_selected_node();\n            var node = null;\n            if (!!selected_node) {\n                if (selected_node.isroot) {\n                    var c = selected_node.children;\n                    var children = [];\n                    for (var i = 0; i < c.length; i++) {\n                        if (c[i].direction === d) {\n                            children.push(i);\n                        }\n                    }\n                    node = c[children[Math.floor((children.length - 1) / 2)]];\n                }\n                else if (selected_node.direction === d) {\n                    var children = selected_node.children;\n                    var childrencount = children.length;\n                    if (childrencount > 0) {\n                        node = children[Math.floor((childrencount - 1) / 2)];\n                    }\n                }\n                else {\n                    node = selected_node.parent;\n                }\n                if (!!node) {\n                    _jm.select_node(node);\n                }\n                evt.stopPropagation();\n                evt.preventDefault();\n            }\n        },\n    };\n    // plugin\n    jm.plugin = function (name, init) {\n        this.name = name;\n        this.init = init;\n    };\n    jm.plugins = [];\n    jm.register_plugin = function (plugin) {\n        if (plugin instanceof jm.plugin) {\n            jm.plugins.push(plugin);\n        }\n    };\n    jm.init_plugins = function (sender) {\n        $w.setTimeout(function () {\n            jm._init_plugins(sender);\n        }, 0);\n    };\n    jm._init_plugins = function (sender) {\n        var l = jm.plugins.length;\n        var fn_init = null;\n        for (var i = 0; i < l; i++) {\n            fn_init = jm.plugins[i].init;\n            if (typeof fn_init === 'function') {\n                fn_init(sender);\n            }\n        }\n    };\n    // quick way\n    jm.show = function (options, mind) {\n        var _jm = new jm(options);\n        _jm.show(mind);\n        return _jm;\n    };\n    // export jsmind\n    if (typeof module !== 'undefined' && typeof exports === 'object') {\n        module.exports = jm;\n    }\n    else if (typeof define === 'function' && (define.amd || define.cmd)) {\n        define(function () { return jm; });\n    }\n    else {\n        $w[__name__] = jm;\n    }\n})(typeof window !== 'undefined' ? window : global);\n",null]}